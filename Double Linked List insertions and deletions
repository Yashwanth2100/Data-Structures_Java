import java.util.*;
public class Main 
{
    class Node 
    {
        Node next;
        Node prev;
        int data;
        public Node(int data)
        {
            this.data=data;
            this.next=null;
            this.prev=null;
        }
    }
    public int size;
	public Node head=null;
	public Node tail=null;
	public Node temp,current;
	
	public void insertbeg(int data)
	{
	    Node newNode =new Node(data);
	    newNode.next=head;
	    newNode.prev=null;
	    
	    if(head==null)
	    {
	    head = newNode;
	    tail=newNode;
	    }
	    else
	    {
	       head.prev=newNode;
	       head=newNode;
	       head.prev=null;
	    }
	}
	  public void insertend(int data)
	  {
	      Node newNode=new Node(data);
	      if(head==null)
	      {
	          head=tail=newNode;
	      }
	      else
	      {
	          tail.next=newNode;
	          newNode.prev=tail;
	          tail= newNode;
	          tail.next=null;
	      }
	      size++;
	    }
	   public void insertmid(int data)
	   {
	       Node newNode=new Node(data);
	       if(head==null)
	       {
	           head=tail=newNode;
	       }
	       else
	       {
	           int count = (size % 2==0 )? (size/2):((size-1)/2);
	          if(head!=null)
	          {
	              temp=head;
	              current=null;
	             for(int i=0;i<=count;i++)
	             {
	                 current=temp;
	                 temp=temp.next;
	                 
	             }
	             current.next =newNode;
	             newNode.next = temp;
	          }
	          size++;
	             
	       }
	   }
	  public void display()
	  {
	      if(head==null)
	      {System.out.println("Double Linked list is Empty");
	          return;
	      }
	      else
	      {
	          while(current!=null)
	          {
	               System.out.println(" "+" "+current.data+" ");
	                current=current.next;
	          }
	      }
	   }
	 public void deleteend()
	 {
	     if (head==null)
	     {
	         return;
	     }
	     else if(head==tail)
	     {
	         head=tail=null;
	     }
	     else
	     {
	         tail=tail.prev;
	         tail.next=null;
	     }
	 }
	 public void deletebeg()
	 {
	     if (head==null)
	     {
	         return;
	     }
	     else if(head==tail)
	     {
	         head=tail=null;
	     }
	     else
	     {
	         head=head.next;
	         head.prev=null;
	     }
	 }
	public static void main(String[] args) {
	             Scanner in =new Scanner (System.in);
	         Main dList= new Main();
	            while(true){
    System.out.println("Enter Operation of Linked list");
    System.out.println("1.insert at begining \n2.insert at middle \n3.insert at end \n4.delete at end \n5.delete at beginning \n6.Exit");
    int opt = in.nextInt();
    if (opt >6 )
    {System.out.println("Invalid input");}
    else
    {
    switch (opt) {
        case 1:
            System.out.println("Enter data of new node to be inserted at beginnig");
            int v=in.nextInt();
            dList.insertbeg(v);
            
            break;
        case 2:
            System.out.println("Enter data of new node to be inserted at middle");
            int n=in.nextInt();
            dList.insertmid(n);
           
            break;
        case 3:
            System.out.println("Enter data of new node to be inserted at end");
            int m= in.nextInt();
            dList.insertend(m);
            
            break;
        case 4:
            System.out.println("1st node will be deleted");
            dList.deletebeg();
        case 5:
            System.out.println("Last node will be deleted");
            dList.deleteend();
        case 6:
            System.out.println("Exit");
            System.exit(0);
            break;
            default:
            break;
	         }
    }System.out.println("Data after node operations") ;
    dList.display();
	            } 
	   
}}
